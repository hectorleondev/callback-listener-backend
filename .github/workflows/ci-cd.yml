name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: 3.11
  POSTGRES_PASSWORD: postgres

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_USER: callback_user
          POSTGRES_DB: callback_listener_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up environment
      working-directory: ./backend
      run: |
        cp .env.example .env
        echo "TEST_DATABASE_URL=postgresql://callback_user:postgres@localhost:5432/callback_listener_test" >> .env
    
    - name: Run linting
      working-directory: ./backend
      run: |
        flake8 app tests
        black --check app tests
        isort --check-only app tests
    
    - name: Run security checks
      working-directory: ./backend
      run: |
        bandit -r app/
    
    - name: Set up database
      working-directory: ./backend
      run: |
        flask db upgrade
      env:
        FLASK_ENV: testing
        TEST_DATABASE_URL: postgresql://callback_user:postgres@localhost:5432/callback_listener_test
    
    - name: Run tests
      working-directory: ./backend
      run: |
        pytest -v --cov=app --cov-report=xml --cov-report=term-missing
      env:
        FLASK_ENV: testing
        TEST_DATABASE_URL: postgresql://callback_user:postgres@localhost:5432/callback_listener_test
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
